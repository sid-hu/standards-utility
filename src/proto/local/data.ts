// @generated by protobuf-ts 2.7.0
// @generated from protobuf file "local/data.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Tool } from "./generic";
import { Box } from "./generic";
// piece data

/**
 * @generated from protobuf message Piece
 */
export interface Piece {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string author = 3;
     */
    author: string;
    /**
     * @generated from protobuf field: repeated Page pages = 4;
     */
    pages: Page[];
}
// measure data

/**
 * @generated from protobuf message Row
 */
export interface Row {
    /**
     * @generated from protobuf field: float offset = 1;
     */
    offset: number;
    /**
     * @generated from protobuf field: float thickness = 2;
     */
    thickness: number;
    /**
     * @generated from protobuf field: repeated float lines = 3;
     */
    lines: number[];
}
/**
 * @generated from protobuf message Measures
 */
export interface Measures {
    /**
     * @generated from protobuf field: Box bounds = 1;
     */
    bounds?: Box;
    /**
     * @generated from protobuf field: repeated Row rows = 2;
     */
    rows: Row[];
}
// practice data

/**
 * @generated from protobuf message Page
 */
export interface Page {
    /**
     * @generated from protobuf field: bytes image = 1;
     */
    image: Uint8Array;
    /**
     * @generated from protobuf field: repeated Section sections = 2;
     */
    sections: Section[];
    /**
     * @generated from protobuf field: Measures measures = 3;
     */
    measures?: Measures;
}
/**
 * @generated from protobuf message Section
 */
export interface Section {
    /**
     * @generated from protobuf field: int32 from = 1;
     */
    from: number;
    /**
     * @generated from protobuf field: int32 to = 2;
     */
    to: number;
    /**
     * @generated from protobuf field: repeated Task tasks = 3;
     */
    tasks: Task[];
}
/**
 * @generated from protobuf message Task
 */
export interface Task {
    /**
     * @generated from protobuf field: repeated Tool tools = 1;
     */
    tools: Tool[];
    /**
     * @generated from protobuf field: TaskState state = 2;
     */
    state?: TaskState;
}
// task state variants

/**
 * @generated from protobuf message SingleState
 */
export interface SingleState {
    /**
     * @generated from protobuf field: repeated bool completed = 1;
     */
    completed: boolean[];
    /**
     * @generated from protobuf field: int32 number = 2;
     */
    number: number;
}
/**
 * @generated from protobuf message HandsSeparate
 */
export interface HandsSeparate {
    /**
     * @generated from protobuf field: repeated bool right = 1;
     */
    right: boolean[];
    /**
     * @generated from protobuf field: repeated bool left = 2;
     */
    left: boolean[];
    /**
     * @generated from protobuf field: int32 number = 3;
     */
    number: number;
}
/**
 * @generated from protobuf message TaskState
 */
export interface TaskState {
    /**
     * @generated from protobuf oneof: hands
     */
    hands: {
        oneofKind: "handsTogether";
        /**
         * @generated from protobuf field: SingleState handsTogether = 1;
         */
        handsTogether: SingleState;
    } | {
        oneofKind: "handsSeparate";
        /**
         * @generated from protobuf field: HandsSeparate handsSeparate = 2;
         */
        handsSeparate: HandsSeparate;
    } | {
        oneofKind: undefined;
    };
    /**
     * @generated from protobuf field: SingleState eyesClosed = 3;
     */
    eyesClosed?: SingleState;
    /**
     * @generated from protobuf field: SingleState memorized = 4;
     */
    memorized?: SingleState;
}
// @generated message type with reflection information, may provide speed optimized methods
class Piece$Type extends MessageType<Piece> {
    constructor() {
        super("Piece", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "author", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "pages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Page }
        ]);
    }
    create(value?: PartialMessage<Piece>): Piece {
        const message = { id: "", name: "", author: "", pages: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Piece>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Piece): Piece {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string author */ 3:
                    message.author = reader.string();
                    break;
                case /* repeated Page pages */ 4:
                    message.pages.push(Page.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Piece, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string author = 3; */
        if (message.author !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.author);
        /* repeated Page pages = 4; */
        for (let i = 0; i < message.pages.length; i++)
            Page.internalBinaryWrite(message.pages[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Piece
 */
export const Piece = new Piece$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Row$Type extends MessageType<Row> {
    constructor() {
        super("Row", [
            { no: 1, name: "offset", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "thickness", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "lines", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<Row>): Row {
        const message = { offset: 0, thickness: 0, lines: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Row>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Row): Row {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float offset */ 1:
                    message.offset = reader.float();
                    break;
                case /* float thickness */ 2:
                    message.thickness = reader.float();
                    break;
                case /* repeated float lines */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.lines.push(reader.float());
                    else
                        message.lines.push(reader.float());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Row, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float offset = 1; */
        if (message.offset !== 0)
            writer.tag(1, WireType.Bit32).float(message.offset);
        /* float thickness = 2; */
        if (message.thickness !== 0)
            writer.tag(2, WireType.Bit32).float(message.thickness);
        /* repeated float lines = 3; */
        if (message.lines.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.lines.length; i++)
                writer.float(message.lines[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Row
 */
export const Row = new Row$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Measures$Type extends MessageType<Measures> {
    constructor() {
        super("Measures", [
            { no: 1, name: "bounds", kind: "message", T: () => Box },
            { no: 2, name: "rows", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Row }
        ]);
    }
    create(value?: PartialMessage<Measures>): Measures {
        const message = { rows: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Measures>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Measures): Measures {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Box bounds */ 1:
                    message.bounds = Box.internalBinaryRead(reader, reader.uint32(), options, message.bounds);
                    break;
                case /* repeated Row rows */ 2:
                    message.rows.push(Row.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Measures, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Box bounds = 1; */
        if (message.bounds)
            Box.internalBinaryWrite(message.bounds, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated Row rows = 2; */
        for (let i = 0; i < message.rows.length; i++)
            Row.internalBinaryWrite(message.rows[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Measures
 */
export const Measures = new Measures$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Page$Type extends MessageType<Page> {
    constructor() {
        super("Page", [
            { no: 1, name: "image", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "sections", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Section },
            { no: 3, name: "measures", kind: "message", T: () => Measures }
        ]);
    }
    create(value?: PartialMessage<Page>): Page {
        const message = { image: new Uint8Array(0), sections: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Page>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Page): Page {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes image */ 1:
                    message.image = reader.bytes();
                    break;
                case /* repeated Section sections */ 2:
                    message.sections.push(Section.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* Measures measures */ 3:
                    message.measures = Measures.internalBinaryRead(reader, reader.uint32(), options, message.measures);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Page, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes image = 1; */
        if (message.image.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.image);
        /* repeated Section sections = 2; */
        for (let i = 0; i < message.sections.length; i++)
            Section.internalBinaryWrite(message.sections[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* Measures measures = 3; */
        if (message.measures)
            Measures.internalBinaryWrite(message.measures, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Page
 */
export const Page = new Page$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Section$Type extends MessageType<Section> {
    constructor() {
        super("Section", [
            { no: 1, name: "from", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "to", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "tasks", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Task }
        ]);
    }
    create(value?: PartialMessage<Section>): Section {
        const message = { from: 0, to: 0, tasks: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Section>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Section): Section {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 from */ 1:
                    message.from = reader.int32();
                    break;
                case /* int32 to */ 2:
                    message.to = reader.int32();
                    break;
                case /* repeated Task tasks */ 3:
                    message.tasks.push(Task.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Section, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 from = 1; */
        if (message.from !== 0)
            writer.tag(1, WireType.Varint).int32(message.from);
        /* int32 to = 2; */
        if (message.to !== 0)
            writer.tag(2, WireType.Varint).int32(message.to);
        /* repeated Task tasks = 3; */
        for (let i = 0; i < message.tasks.length; i++)
            Task.internalBinaryWrite(message.tasks[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Section
 */
export const Section = new Section$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Task$Type extends MessageType<Task> {
    constructor() {
        super("Task", [
            { no: 1, name: "tools", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["Tool", Tool] },
            { no: 2, name: "state", kind: "message", T: () => TaskState }
        ]);
    }
    create(value?: PartialMessage<Task>): Task {
        const message = { tools: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Task>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Task): Task {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Tool tools */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.tools.push(reader.int32());
                    else
                        message.tools.push(reader.int32());
                    break;
                case /* TaskState state */ 2:
                    message.state = TaskState.internalBinaryRead(reader, reader.uint32(), options, message.state);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Task, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Tool tools = 1; */
        if (message.tools.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.tools.length; i++)
                writer.int32(message.tools[i]);
            writer.join();
        }
        /* TaskState state = 2; */
        if (message.state)
            TaskState.internalBinaryWrite(message.state, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Task
 */
export const Task = new Task$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SingleState$Type extends MessageType<SingleState> {
    constructor() {
        super("SingleState", [
            { no: 1, name: "completed", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "number", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SingleState>): SingleState {
        const message = { completed: [], number: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SingleState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SingleState): SingleState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bool completed */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.completed.push(reader.bool());
                    else
                        message.completed.push(reader.bool());
                    break;
                case /* int32 number */ 2:
                    message.number = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SingleState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated bool completed = 1; */
        if (message.completed.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.completed.length; i++)
                writer.bool(message.completed[i]);
            writer.join();
        }
        /* int32 number = 2; */
        if (message.number !== 0)
            writer.tag(2, WireType.Varint).int32(message.number);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SingleState
 */
export const SingleState = new SingleState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HandsSeparate$Type extends MessageType<HandsSeparate> {
    constructor() {
        super("HandsSeparate", [
            { no: 1, name: "right", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "left", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "number", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<HandsSeparate>): HandsSeparate {
        const message = { right: [], left: [], number: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HandsSeparate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HandsSeparate): HandsSeparate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bool right */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.right.push(reader.bool());
                    else
                        message.right.push(reader.bool());
                    break;
                case /* repeated bool left */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.left.push(reader.bool());
                    else
                        message.left.push(reader.bool());
                    break;
                case /* int32 number */ 3:
                    message.number = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HandsSeparate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated bool right = 1; */
        if (message.right.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.right.length; i++)
                writer.bool(message.right[i]);
            writer.join();
        }
        /* repeated bool left = 2; */
        if (message.left.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.left.length; i++)
                writer.bool(message.left[i]);
            writer.join();
        }
        /* int32 number = 3; */
        if (message.number !== 0)
            writer.tag(3, WireType.Varint).int32(message.number);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message HandsSeparate
 */
export const HandsSeparate = new HandsSeparate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TaskState$Type extends MessageType<TaskState> {
    constructor() {
        super("TaskState", [
            { no: 1, name: "handsTogether", kind: "message", oneof: "hands", T: () => SingleState },
            { no: 2, name: "handsSeparate", kind: "message", oneof: "hands", T: () => HandsSeparate },
            { no: 3, name: "eyesClosed", kind: "message", T: () => SingleState },
            { no: 4, name: "memorized", kind: "message", T: () => SingleState }
        ]);
    }
    create(value?: PartialMessage<TaskState>): TaskState {
        const message = { hands: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TaskState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TaskState): TaskState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* SingleState handsTogether */ 1:
                    message.hands = {
                        oneofKind: "handsTogether",
                        handsTogether: SingleState.internalBinaryRead(reader, reader.uint32(), options, (message.hands as any).handsTogether)
                    };
                    break;
                case /* HandsSeparate handsSeparate */ 2:
                    message.hands = {
                        oneofKind: "handsSeparate",
                        handsSeparate: HandsSeparate.internalBinaryRead(reader, reader.uint32(), options, (message.hands as any).handsSeparate)
                    };
                    break;
                case /* SingleState eyesClosed */ 3:
                    message.eyesClosed = SingleState.internalBinaryRead(reader, reader.uint32(), options, message.eyesClosed);
                    break;
                case /* SingleState memorized */ 4:
                    message.memorized = SingleState.internalBinaryRead(reader, reader.uint32(), options, message.memorized);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TaskState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* SingleState handsTogether = 1; */
        if (message.hands.oneofKind === "handsTogether")
            SingleState.internalBinaryWrite(message.hands.handsTogether, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* HandsSeparate handsSeparate = 2; */
        if (message.hands.oneofKind === "handsSeparate")
            HandsSeparate.internalBinaryWrite(message.hands.handsSeparate, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* SingleState eyesClosed = 3; */
        if (message.eyesClosed)
            SingleState.internalBinaryWrite(message.eyesClosed, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* SingleState memorized = 4; */
        if (message.memorized)
            SingleState.internalBinaryWrite(message.memorized, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TaskState
 */
export const TaskState = new TaskState$Type();
